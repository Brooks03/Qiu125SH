//快速幂
//#include <iostream>
//#include <algorithm>
//using namespace std;
//int quick_pow(int a, int b)
//{
//    int temp = a, ans = 1;
//    while (b){
//        if (b & 1) ans *= temp;
//        b >>= 1;
//        temp *= temp;
//    }
//    return ans;
//}
//int main()
//{
//    int a, b;
//    while (cin >> a >> b){
//        cout << quick_pow(a, b) << endl;
//    }
//}
//
//
//
//gcd
//#include <iostream>
//using namespace std;
//int gcd(int a,int b)
//{
//    return b ? gcd(b,a % b) : a;
//}
//int main()
//{
//    int a, b;
//    cin >> a >> b;
//    cout << gcd(a, b) << endl;
//    return 0;
//}
//
//lcm
//int lcm(int a, int b) {
//    return a * b / gcd(a, b);
//}
//
//
//最小公倍数模板
//
//求三个数的最小公倍数
//#include <iostream>
//using namespace std;
//int max(int a,int b,int c)
//{
//    if(a>b&&a>c)
//        return a;
//    else if(b>a&&b>c)
//        return b;
//    else
//        return c;
//}
//int main()
//{
//    int x,y,z,i,j,k;
//    scanf("%d%d%d",&x,&y,&z);
//    k = max(x,y,z);
//    i= 1;
//    while(1)
//    {
//        j = k * i;
//        if((j%x==0)&&(j%y==0)&&(j%z==0))
//            break;
//        i++;
//    }
//
//    cout << j << endl;
//    return 0;
//}
//
//
//效率最高的直接求两个数的最小公倍数
//
//#include <iostream>
//using namespace std;
//int main()
//{
//    int a = 0, b = 0;
//    scanf("%d %d", &a, &b);
//    int i = 1;
//    while ((a * i) % b != 0)
//    {
//            i++;
//    }
//    printf("%d\n", i * a);
//    return 0;
//}
//
//
//
//其他进制转十进制
//秦九韶算法(进制转换)
//n位b进制
//#include <iostream>
//using namespace std;
//int ans;
//int main()
//{
//    int n, b;
//    cin >> n >> b;
//    for (int i = 0; i < n; i ++){
//        int x;
//        cin >> x;
//        ans += ans * b + x;
//    }
//    cout << ans << endl;
//    return 0;
//}

//数n和b进制
//#include <iostream>
//using namespace std;
//int main()
//{
//    int n, b;
//    cin >> n >> b;
//    int sum = 0;
//    int cnt = 0;
//    while (n){
//        sum += (n % 10) * pow(b, cnt);
//        n /= 10;
//        cnt ++;
//    }
//    cout << sum << endl;
//    return 0;
//}
//
//
//十进制转其他进制
//#include <iostream>
//#include <vector>
//using namespace std;
//int n, b;
//vector<int>vec;
//int main()
//{
//    cin >> n >> b;
//    while (n / b){
//        if (n >= b){
//            vec.push_back(n % b);
//            n /= b;
//            if (n < b){
//                vec.push_back(n);
//            }
//        }
//    }
//    for (int i = vec.size() - 1; i >= 0; i --)cout << vec[i];
//    return 0;
//}
//
//

//判断质数
//
//bool is_prime(int x)
//{
//    if (x < 2)return false;
//    for (int i = 2; i <= x / i; i ++)
//        if (x % i == 0)return false;
//    return true;
//}
//
//
//分解质因数
//void divide(int x)
//{
//    for (int i = 2; i <= x / i; i ++ )
//        if (x % i == 0)
//        {
//            int s = 0;
//            while (x % i == 0) x /= i, s ++ ;
//            cout << i << ' ' << s << endl;
//        }
//    if (x > 1) cout << x << ' ' << 1 << endl;
//    cout << endl;
//}
//
